<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeremy&#39;s Note</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeremywu.info/"/>
  <updated>2018-07-17T16:23:04.000Z</updated>
  <id>https://jeremywu.info/</id>
  
  <author>
    <name>Jeremy Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React源码阅读系列 - §1.1 生命周期 Life cycle</title>
    <link href="https://jeremywu.info/2018/07/17/React%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97-%C2%A71.1-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-Lifecycle/"/>
    <id>https://jeremywu.info/2018/07/17/React源码阅读系列-§1.1-生命周期-Lifecycle/</id>
    <published>2018-07-17T13:25:22.000Z</published>
    <updated>2018-07-17T16:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关键词:</strong> <code>Lifecycle</code> <code>生命周期</code></p><h1 id="React的生命周期"><a href="#React的生命周期" class="headerlink" title="React的生命周期"></a>React的生命周期</h1><p>&emsp;&emsp;&nbsp;每一个软件都有他的生命周期, React也不例外, 从React的Tutorial就开始向每一个用户介绍React的生命周期, React的各种内嵌钩子函数的使用. 下面来详细介绍一下React的生命周期到底有哪几个过程.</p><a id="more"></a><h3 id="通过一张图来理解"><a href="#通过一张图来理解" class="headerlink" title="通过一张图来理解:"></a>通过一张图来理解:</h3><img src="/2018/07/17/React源码阅读系列-§1.1-生命周期-Lifecycle/lifecycle.png" title="lifecycle"><h3 id="通过一段注释来理解"><a href="#通过一段注释来理解" class="headerlink" title="通过一段注释来理解:"></a>通过一段注释来理解:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ------------------ The Life-Cycle of a Composite Component ------------------</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - constructor: Initialization of state. The instance is now retained.</span></span><br><span class="line"><span class="comment"> *   - componentWillMount</span></span><br><span class="line"><span class="comment"> *   - render</span></span><br><span class="line"><span class="comment"> *   - [children's constructors]</span></span><br><span class="line"><span class="comment"> *     - [children's componentWillMount and render]</span></span><br><span class="line"><span class="comment"> *     - [children's componentDidMount]</span></span><br><span class="line"><span class="comment"> *     - componentDidMount</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       Update Phases:</span></span><br><span class="line"><span class="comment"> *       - componentWillReceiveProps (only called if parent updated)</span></span><br><span class="line"><span class="comment"> *       - shouldComponentUpdate</span></span><br><span class="line"><span class="comment"> *         - componentWillUpdate</span></span><br><span class="line"><span class="comment"> *           - render</span></span><br><span class="line"><span class="comment"> *           - [children's constructors or receive props phases]</span></span><br><span class="line"><span class="comment"> *         - componentDidUpdate</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     - componentWillUnmount</span></span><br><span class="line"><span class="comment"> *     - [children's componentWillUnmount]</span></span><br><span class="line"><span class="comment"> *   - [children destroyed]</span></span><br><span class="line"><span class="comment"> * - (destroyed): The instance is now blank, released by React and ready for GC.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><div class="tip"><br><p>注:</p><br><br><p>i. 该注释出处为React 源码仓库中的<a href="https://github.com/facebook/react/blob/v15.6.2/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L88" target="_blank" rel="noopener">ReactCompositeComponent.js</a></p><br><p>ii. 通过用户编写的<strong>Component</strong>都是一个<strong>Composite Component</strong></p><br></div><h3 id="ReactComponent生命周期以及所对应的钩子函数-Hook"><a href="#ReactComponent生命周期以及所对应的钩子函数-Hook" class="headerlink" title="ReactComponent生命周期以及所对应的钩子函数(Hook)"></a>ReactComponent生命周期以及所对应的钩子函数(Hook)</h3><ol><li><p>Component 创建:<br>i. Component Constructor - 初始化State Props<br>ii. ComponentWillMount - Hook API<br>iii. render - 创建节点<br>iv. ComponentDidMount - Hook API</p></li><li><p>Component 更新<br>i. ShouldComponentUpdate - Hook API<br>ii. ComponentWillUpdate - Hook API<br>iii. render - 更新节点<br>iv. ComponentDidUpdate - Hook API</p></li><li><p>Component 销毁<br>i. ComponentWillUnmount - Hook API<br>ii. 类似 <code>someComponent = null;</code> - 等待GC</p></li></ol><h3 id="下期预告-React-createElement"><a href="#下期预告-React-createElement" class="headerlink" title="下期预告: React.createElement"></a>下期预告: <code>React.createElement</code></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;关键词:&lt;/strong&gt; &lt;code&gt;Lifecycle&lt;/code&gt; &lt;code&gt;生命周期&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;React的生命周期&quot;&gt;&lt;a href=&quot;#React的生命周期&quot; class=&quot;headerlink&quot; title=&quot;React的生命周期&quot;&gt;&lt;/a&gt;React的生命周期&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&amp;nbsp;每一个软件都有他的生命周期, React也不例外, 从React的Tutorial就开始向每一个用户介绍React的生命周期, React的各种内嵌钩子函数的使用. 下面来详细介绍一下React的生命周期到底有哪几个过程.&lt;/p&gt;
    
    </summary>
    
      <category term="React源码阅读系列" scheme="https://jeremywu.info/categories/React%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="React源码阅读" scheme="https://jeremywu.info/tags/React%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>React源码阅读系列 - §0 简介 Intro</title>
    <link href="https://jeremywu.info/2018/07/16/React%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%20-%20%C2%A70%20%E7%AE%80%E4%BB%8B%20Intro/"/>
    <id>https://jeremywu.info/2018/07/16/React源码阅读系列 - §0 简介 Intro/</id>
    <published>2018-07-16T13:43:51.000Z</published>
    <updated>2018-07-17T15:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关键词:</strong> <code>React</code> <code>源码分析</code></p><h1 id="React-源码阅读"><a href="#React-源码阅读" class="headerlink" title="React 源码阅读"></a>React 源码阅读</h1><p><strong>&emsp;&emsp;&nbsp;最近由于工作变动, 被调到了新的部门, 新的部门里的很多代码并不熟悉, 便只能硬着头皮看下去, 随即发现了一个问题, 跳出舒适圈的我, 在看代码的过程中, 学到了非常多的东西, 想要想办法证明自己, 于是便想开这么一篇React的源码阅读的坑, 准备花一段时间来阅读以及记录自己对源码阅读后的理解和感悟.</strong></p><h3 id="React版本"><a href="#React版本" class="headerlink" title="React版本"></a>React版本</h3><div class="tip"><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Name"</span>: <span class="string">"React"</span>,</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"15.6.2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></div><a id="more"></a><h3 id="核心概念-Core-Concepts"><a href="#核心概念-Core-Concepts" class="headerlink" title="核心概念 (Core Concepts):"></a>核心概念 (Core Concepts):</h3><p><strong>0. 基础部分 (Pre-requirement)</strong></p><ul><li>生命周期</li><li>从 JSX (TSX) 到 JS</li></ul><p><strong>1. 启动部分 (在应用启动时的代码分析)</strong></p><ul><li>从组件 (<strong>Component</strong>) 到 虚拟节点 (<strong>Virtual Node</strong>)</li><li>从虚拟节点 (<strong>Virtual Node</strong>) 到 真实DOM节点 (<strong>Actual Node</strong>)</li></ul><p><strong>2. 存在周期 (在存在周期时的代码分析)</strong></p><ul><li>事件机制 (Event Handling)</li><li>事务处理 (Transaction Operation)</li><li>更新操作 (Updating Action)<br>i. 数据更新 (Data Updating)<br>ii. 视图更新 (Layout Updating)</li><li>组件间的通信 (Component Communication)</li><li>Diff的算法分析 (Diff Algorithm)</li></ul><p><strong>3. 总结</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;关键词:&lt;/strong&gt; &lt;code&gt;React&lt;/code&gt; &lt;code&gt;源码分析&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;React-源码阅读&quot;&gt;&lt;a href=&quot;#React-源码阅读&quot; class=&quot;headerlink&quot; title=&quot;React 源码阅读&quot;&gt;&lt;/a&gt;React 源码阅读&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;emsp;&amp;emsp;&amp;nbsp;最近由于工作变动, 被调到了新的部门, 新的部门里的很多代码并不熟悉, 便只能硬着头皮看下去, 随即发现了一个问题, 跳出舒适圈的我, 在看代码的过程中, 学到了非常多的东西, 想要想办法证明自己, 于是便想开这么一篇React的源码阅读的坑, 准备花一段时间来阅读以及记录自己对源码阅读后的理解和感悟.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;React版本&quot;&gt;&lt;a href=&quot;#React版本&quot; class=&quot;headerlink&quot; title=&quot;React版本&quot;&gt;&lt;/a&gt;React版本&lt;/h3&gt;&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;React&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;Version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;15.6.2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="React源码阅读系列" scheme="https://jeremywu.info/categories/React%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="React源码阅读" scheme="https://jeremywu.info/tags/React%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
